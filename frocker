#! /usr/bin/env bash
#
# ========================================
#
# Wrapper to build/start/stop/etc Docker containers for freckle folders.
#
# Copyright: Markus Binsteiner, 2018
# License: GPL v3

# =============================================================
# global vars
PROGNAME="frocker"

DOCKER_ID="local"
FRECKLES_VERSION="git"
#NO_CACHE="--no-cache"

# =============================================================
# Helper functions

function command_exists {
type "$1" > /dev/null 2>&1 ;
}

function error_exit {

#	----------------------------------------------------------------
#	Function for exit due to fatal program error
#		Accepts 1 argument:
#			string containing descriptive error message
#	----------------------------------------------------------------

echo ""
error_output "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
echo ""
exit 1
}

function error_output {
# log $1
(>&2 echo "$@")
}


function display_command_build_help {

echo ""
echo "Usage:"
echo "    frocker build -h                               display this help message."
echo "    frocker build [-i IMAGE_NAME] [-r CONTEXT_REPO]      build a docker container for the current folder, optionally using the provided name"
}

function build {

image_name=${1}
repos=${2}
vars=${3}

if [[ ! -f "${THIS_DIR}/Dockerfile" ]]; then
    echo "* no Dockerfile found in this folder, creating default one..."
    echo "FROM freckles:freckelize-prod" > "${THIS_DIR}/Dockerfile"
fi

echo ""
echo "- starting build process..."
echo ""

docker build ${NO_CACHE} -t "${DOCKER_ID}:${1}" -f Dockerfile --build-arg FRECKLES_VERSION="${FRECKLES_VERSION}" --build-arg FRECKLE_CONTEXT_REPOS="${repos}" --build-arg FRECKLE_EXTRA_VARS="${vars}" .  || error_exit 'docker built process failed'
}

function command_build {

local repos=""
local vars=""

while getopts ":hi:r:v:" opt; do
    case ${opt} in
        h )
            display_command_build_help
            exit 0
            ;;
        i )
            name=$OPTARG
            ;;
        r )
            repos="${repos} -r $OPTARG"
            ;;
        v )
            if [[ "$OPTARG" = /* ]]; then
                echo "No absolute paths allowed, please use a relative path, starting from the base freckle folder."
                exit 1
            fi
            vars="${vars} -v /freckle/$OPTARG"
            ;;
        \? )
            echo "Invalid Option: -$OPTARG" 1>&2
            display_command_build_help
            exit 1
            ;;
        : )
            echo "Invalid Option: -$OPTARG requires an argument" 1>&2
            display_command_build_help
            exit 1
            ;;
    esac
done

if [[ -z "$name" ]]; then
    name="freckelize_${THIS_DIR_NAME}"
fi

if [[ -z "$vars" ]]; then
    if [[ ! -f "${THIS_DIR}/.freckelize/docker.yml" ]]; then
        echo "No extra vars provided, and no defaults file '.freckelize/docker.yml exists. Creating one, and using it..."
        mkdir -p "${THIS_DIR}/.freckelize"
        echo "
- freckle:
    owner: freckles
    group: freckles
    freckle_docker: true

" > "${THIS_DIR}/.freckelize/docker.yml"
    else
       echo "No extra vars provided, using values from existing '.freckelize/docker.yml"
    fi
    vars="-v /freckle/.freckelize/docker.yml"

fi

build "${name}" "${repos}" "${vars}"

}

function run {

container_name="${1}"
image_name="${2}"
ports="${3}"
mounts="${4}"

# check if image exists
if [[ "$(docker images -q ${image_name} 2> /dev/null)" == "" ]]; then
    echo "No image '${image_name}' exists. Run build step first."
    exit 1
fi

result=$( docker ps | grep ${container_name} )

if [[ -n "$result" ]]; then
    echo "Container '${container_name}' already running. Doing nothing..."
    exit 0
fi

result=$( docker ps -a | grep ${container_name} )

if [[ -n "$result" ]]; then
    echo "Container '${container_name}' already exists, but stopped. Starting..."
    docker start "${container_name}"
else
   echo "Container '${container_name}' does not exist, creating and starting it..."
   docker_id=$(docker run --name "${container_name}" ${ports} ${mounts} -d "${image_name}")
   echo "   container id: ${docker_id}"
fi

}

function display_command_run_help {

echo ""
echo "Usage:"
echo "    frocker run -h                                            display this help message."
echo "    frocker run [-n NAME] [-i IMAGE_NAME] [-p PORT_MAPPING]   run the docker container for this folder, build if it doesn't exist yet"

}

function command_run {

local ports=""

while getopts ":hn:i:p:" opt; do
    case ${opt} in
        h )
            display_command_run_help
            exit 0
            ;;
        n )
            name=$OPTARG
            ;;
        i )
            image_name=$OPTARG
            ;;
        p )
            ports="${ports} -p $OPTARG"
            ;;
        \? )
            echo "Invalid Option: -$OPTARG" 1>&2
            display_command_build_help
            exit 1
            ;;
        : )
            echo "Invalid Option: -$OPTARG requires an argument" 1>&2
            display_command_build_help
            exit 1
            ;;
    esac
done

if [[ -z "$name" ]]; then
    name="freckelize_${THIS_DIR_NAME}"
fi

if [[ -z "$image_name" ]]; then
    image_name="${DOCKER_ID}:freckelize_${THIS_DIR_NAME}"
fi

mounts="--mount type=bind,source=${THIS_DIR},target=/freckle"

run "${name}" "${image_name}" "${ports}" "${mounts}"

}

function display_help {
echo ""
echo "Usage:"
echo "    frocker -h                      Display this help message."
echo "    frocker build                   Build a Docker container for this freckle folder."
}

# =============================================================
# VARS
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

THIS_DIR="${PWD}"
cd -P "$THIS_DIR"

THIS_DIR_NAME=$(basename ${THIS_DIR})

# CONTAINER_NAME=wordpress
# DOCKER_USERNAME="local"

# FRECKLE_CONTEXT_REPO="frkl:${CONTAINER_NAME}"
# FRECKELIZE_DOCKER_VARS_FILE=".freckelize/docker.yml"
# FRECKLES_VERSION=git

# MOUNT_MYSQL_VOLUME=false

# script start
# --------------

# MYSQL_DIR=".freckelize/docker/mysql_volume"
# BACKUPS_DIR="backups"
# WORDPRESS_DIR="wordpress"

# IMAGE_NAME="${DOCKER_USERNAME}:${CONTAINER_NAME}"


# NO_CACHE=""


# =============================================================
# ARG PARSING

echo ""

while getopts ":h" opt; do
    case ${opt} in
        h )
            display_help
            exit 0
            ;;
        \? )
            echo "Invalid Option: -$OPTARG" 1>&2
            display_help
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))

if [ -z "$1" ]
then
    display_help
    exit 0
fi

subcommand=$1
shift

case "$subcommand" in

    build)
        command_build "$@"
        ;;
    run)
        command_run "$@"
        ;;
    stop)
        command_stop "$@"
        ;;
    rm)
        command_rm "$@"
        ;;
esac

exit 0
